version: '3.8'

# Production-ready Agent Zero with full monitoring and observability stack
services:
  # Agent Zero main application
  agent-zero:
    container_name: agent-zero
    image: agent0ai/agent-zero:latest
    volumes:
      - ./:/a0
      - agent-zero-logs:/a0/logs
      - agent-zero-memory:/a0/memory
      - agent-zero-knowledge:/a0/knowledge
    ports:
      - "${WEB_UI_PORT:-50001}:80"
    environment:
      - LITELLM_PROXY_URL=http://litellm:4000
      - LANGFUSE_HOST=http://langfuse:3000
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY:-}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY:-}
    env_file:
      - .env
    depends_on:
      - litellm
      - langfuse
      - rabbitmq
      - opensearch
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=main"

  # LiteLLM Proxy - for cost tracking, rate limiting, and model interchangeability
  litellm:
    container_name: agent-zero-litellm
    image: ghcr.io/berriai/litellm:main-latest
    ports:
      - "4000:4000"
    volumes:
      - ./config/litellm:/app/config
      - litellm-logs:/app/logs
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY:-sk-1234}
      - DATABASE_URL=postgresql://litellm:litellm@postgres:5432/litellm
      - STORE_MODEL_IN_DB=True
      - LITELLM_LOG=INFO
    command: --config /app/config/litellm_config.yaml --port 4000 --num_workers 4
    depends_on:
      - postgres
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=litellm"

  # Langfuse - for LLM observability and tracing
  langfuse:
    container_name: agent-zero-langfuse
    image: langfuse/langfuse:latest
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://langfuse:langfuse@postgres:5432/langfuse
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-changeme-secret-key-at-least-32-chars}
      - SALT=${LANGFUSE_SALT:-changeme-salt-at-least-32-chars}
      - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-false}
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=true
    depends_on:
      - postgres
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=langfuse"

  # PostgreSQL - database for LiteLLM and Langfuse
  postgres:
    container_name: agent-zero-postgres
    image: postgres:16-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_MULTIPLE_DATABASES=litellm,langfuse
    ports:
      - "5432:5432"
    networks:
      - agent-zero-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.agent-zero.service=postgres"

  # Prometheus - metrics collection
  prometheus:
    container_name: agent-zero-prometheus
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=prometheus"

  # Grafana - visualization and dashboards
  grafana:
    container_name: agent-zero-grafana
    image: grafana/grafana:latest
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-opensearch-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3001
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
      - loki
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=grafana"

  # Loki - log aggregation
  loki:
    container_name: agent-zero-loki
    image: grafana/loki:latest
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=loki"

  # Promtail - log shipper for Loki
  promtail:
    container_name: agent-zero-promtail
    image: grafana/promtail:latest
    volumes:
      - ./config/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - agent-zero-logs:/logs/agent-zero:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=promtail"

  # Netdata - real-time system monitoring
  netdata:
    container_name: agent-zero-netdata
    image: netdata/netdata:latest
    hostname: agent-zero-host
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdata-config:/etc/netdata
      - netdata-lib:/var/lib/netdata
      - netdata-cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN:-}
      - NETDATA_CLAIM_URL=${NETDATA_CLAIM_URL:-}
      - NETDATA_CLAIM_ROOMS=${NETDATA_CLAIM_ROOMS:-}
    ports:
      - "19999:19999"
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=netdata"

  # RabbitMQ - message queue for async tasks
  rabbitmq:
    container_name: agent-zero-rabbitmq
    image: rabbitmq:3-management-alpine
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-admin}
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    networks:
      - agent-zero-network
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "com.agent-zero.service=rabbitmq"

  # OpenSearch - search and analytics
  opensearch:
    container_name: agent-zero-opensearch
    image: opensearchproject/opensearch:latest
    environment:
      - cluster.name=agent-zero-cluster
      - node.name=opensearch-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - DISABLE_SECURITY_PLUGIN=true  # Enable for development, disable in production
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - "9200:9200"  # REST API
      - "9600:9600"  # Performance Analyzer
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=opensearch"

  # OpenSearch Dashboards - visualization for OpenSearch
  opensearch-dashboards:
    container_name: agent-zero-opensearch-dashboards
    image: opensearchproject/opensearch-dashboards:latest
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      # DISABLE_SECURITY_DASHBOARDS_PLUGIN is not set for production; security plugin is enabled by default
    ports:
      - "5601:5601"
    depends_on:
      - opensearch
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=opensearch-dashboards"

  # Node Exporter - expose system metrics for Prometheus
  node-exporter:
    container_name: agent-zero-node-exporter
    image: prom/node-exporter:latest
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - agent-zero-network
    restart: unless-stopped
    labels:
      - "com.agent-zero.service=node-exporter"

  # cAdvisor - container metrics for Prometheus
  cadvisor:
    container_name: agent-zero-cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - agent-zero-network
    restart: unless-stopped
    privileged: true
    labels:
      - "com.agent-zero.service=cadvisor"

  # Redis - caching and session storage for multi-user support
  redis:
    container_name: agent-zero-redis
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - agent-zero-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    labels:
      - "com.agent-zero.service=redis"

networks:
  agent-zero-network:
    driver: bridge
    name: agent-zero-network

volumes:
  agent-zero-logs:
    name: agent-zero-logs
  agent-zero-memory:
    name: agent-zero-memory
  agent-zero-knowledge:
    name: agent-zero-knowledge
  litellm-logs:
    name: agent-zero-litellm-logs
  postgres-data:
    name: agent-zero-postgres-data
  prometheus-data:
    name: agent-zero-prometheus-data
  grafana-data:
    name: agent-zero-grafana-data
  loki-data:
    name: agent-zero-loki-data
  netdata-config:
    name: agent-zero-netdata-config
  netdata-lib:
    name: agent-zero-netdata-lib
  netdata-cache:
    name: agent-zero-netdata-cache
  rabbitmq-data:
    name: agent-zero-rabbitmq-data
  opensearch-data:
    name: agent-zero-opensearch-data
  redis-data:
    name: agent-zero-redis-data
