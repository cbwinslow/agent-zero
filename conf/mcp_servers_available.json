{
  "mcpServers": {
    "memory-manager": {
      "name": "Memory Manager",
      "description": "Agent Zero Memory Management Server - Manages memories, knowledge base, and agent rules",
      "type": "stdio",
      "command": "python",
      "args": [
        "/a0/run_memory_mcp.py"
      ],
      "env": {
        "MEMORY_MCP_HOST": "localhost",
        "MEMORY_MCP_PORT": "3001"
      },
      "enabled": true
    },
    "filesystem": {
      "name": "Filesystem",
      "description": "Access and manage files and directories with advanced search capabilities",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/tmp",
        "/home"
      ],
      "enabled": false,
      "notes": "Provides read/write access to specified directories. Configure allowed paths in args."
    },
    "git": {
      "name": "Git",
      "description": "Git operations including status, diff, commit, and repository management",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-git"
      ],
      "enabled": false,
      "notes": "Provides Git integration. Must be run in a Git repository."
    },
    "github": {
      "name": "GitHub",
      "description": "GitHub API integration for issues, PRs, repositories, and code search",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_TOKEN": "${GITHUB_TOKEN}"
      },
      "enabled": false,
      "notes": "Requires GITHUB_TOKEN environment variable for authentication."
    },
    "gitlab": {
      "name": "GitLab",
      "description": "GitLab API integration for issues, merge requests, and repository management",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-gitlab"
      ],
      "env": {
        "GITLAB_TOKEN": "${GITLAB_TOKEN}",
        "GITLAB_URL": "${GITLAB_URL}"
      },
      "enabled": false,
      "notes": "Requires GITLAB_TOKEN and optionally GITLAB_URL (defaults to gitlab.com)."
    },
    "postgres": {
      "name": "PostgreSQL",
      "description": "PostgreSQL database queries and schema inspection",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-postgres"
      ],
      "env": {
        "POSTGRES_CONNECTION_STRING": "${POSTGRES_CONNECTION_STRING}"
      },
      "enabled": false,
      "notes": "Requires POSTGRES_CONNECTION_STRING environment variable."
    },
    "sqlite": {
      "name": "SQLite",
      "description": "SQLite database queries and management",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sqlite",
        "/path/to/database.db"
      ],
      "enabled": false,
      "notes": "Configure database path in args."
    },
    "brave-search": {
      "name": "Brave Search",
      "description": "Web search using Brave Search API",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-brave-search"
      ],
      "env": {
        "BRAVE_API_KEY": "${BRAVE_API_KEY}"
      },
      "enabled": false,
      "notes": "Requires BRAVE_API_KEY environment variable."
    },
    "google-drive": {
      "name": "Google Drive",
      "description": "Access and manage Google Drive files and folders",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-gdrive"
      ],
      "env": {
        "GOOGLE_APPLICATION_CREDENTIALS": "${GOOGLE_APPLICATION_CREDENTIALS}"
      },
      "enabled": false,
      "notes": "Requires Google Cloud service account credentials."
    },
    "slack": {
      "name": "Slack",
      "description": "Send messages and interact with Slack workspaces",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-slack"
      ],
      "env": {
        "SLACK_BOT_TOKEN": "${SLACK_BOT_TOKEN}"
      },
      "enabled": false,
      "notes": "Requires SLACK_BOT_TOKEN environment variable."
    },
    "puppeteer": {
      "name": "Puppeteer",
      "description": "Browser automation and web scraping with Puppeteer",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-puppeteer"
      ],
      "enabled": false,
      "notes": "Provides headless browser automation capabilities."
    },
    "docker": {
      "name": "Docker",
      "description": "Docker container management and operations",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "docker-mcp"
      ],
      "enabled": false,
      "notes": "Manage Docker containers, images, networks, and volumes."
    },
    "kubernetes": {
      "name": "Kubernetes",
      "description": "Kubernetes cluster management and operations",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-kubernetes"
      ],
      "env": {
        "KUBECONFIG": "${KUBECONFIG}"
      },
      "enabled": false,
      "notes": "Requires kubectl and KUBECONFIG environment variable."
    },
    "sequential-thinking": {
      "name": "Sequential Thinking",
      "description": "Enhanced reasoning through structured thought processes",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "enabled": false,
      "notes": "Provides prompts for step-by-step reasoning."
    },
    "everything": {
      "name": "Everything Search",
      "description": "Fast file search using Everything search engine (Windows only)",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-everything"
      ],
      "enabled": false,
      "notes": "Windows only. Requires Everything search engine installed."
    },
    "aws-kb": {
      "name": "AWS Knowledge Base",
      "description": "Query AWS knowledge bases and documents",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-aws-kb-retrieval"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": "${AWS_ACCESS_KEY_ID}",
        "AWS_SECRET_ACCESS_KEY": "${AWS_SECRET_ACCESS_KEY}",
        "AWS_REGION": "${AWS_REGION}"
      },
      "enabled": false,
      "notes": "Requires AWS credentials and region."
    },
    "agentic-flow": {
      "name": "agentic-flow",
      "description": "Production-ready AI agent orchestration platform with 66 specialized agents, 213 MCP tools, ReasoningBank learning memory, and autonomous multi-agent swarms. Built by @ruvnet with Claude Agent SDK, neural networks, memory persistence, GitHub integration, ",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "agentic-flow"
      ],
      "enabled": false,
      "notes": "Source: https://www.npmjs.com/package/agentic-flow"
    },
    "git-mcp-server": {
      "name": "git-mcp-server",
      "description": "A secure and scalable Git MCP server enabling AI agents to perform comprehensive Git version control operations via STDIO and Streamable HTTP.",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@cyanheads/git-mcp-server"
      ],
      "enabled": false,
      "notes": "Source: https://www.npmjs.com/package/@cyanheads/git-mcp-server"
    },
    "mcp-server-mysql": {
      "name": "mcp-server-mysql",
      "description": "MCP server for interacting with MySQL databases based on Node",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@benborla29/mcp-server-mysql"
      ],
      "enabled": false,
      "notes": "Source: https://www.npmjs.com/package/@benborla29/mcp-server-mysql"
    },
    "mcp-server-atlassian-bitbucket": {
      "name": "mcp-server-atlassian-bitbucket",
      "description": "Node.js/TypeScript MCP server for Atlassian Bitbucket. Enables AI systems (LLMs) to interact with workspaces, repositories, and pull requests via tools (list, get, comment, search). Connects AI directly to version control workflows through the standard MC",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@aashari/mcp-server-atlassian-bitbucket"
      ],
      "enabled": false,
      "notes": "Source: https://www.npmjs.com/package/@aashari/mcp-server-atlassian-bitbucket"
    },
    "mcp-server": {
      "name": "mcp-server",
      "description": "Official Railway MCP server",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@railway/mcp-server"
      ],
      "enabled": false,
      "notes": "Source: https://www.npmjs.com/package/@railway/mcp-server"
    },
    "codacy-mcp": {
      "name": "codacy-mcp",
      "description": "Codacy MCP server",
      "type": "stdio",
      "command": "npx",
      "args": [
        "-y",
        "@codacy/codacy-mcp"
      ],
      "enabled": false,
      "notes": "Source: https://www.npmjs.com/package/@codacy/codacy-mcp"
    }
  }
}