{
  "mcpServers": {
    "memory-manager": {
      "name": "Memory Manager",
      "description": "Agent Zero Memory Management Server - Manages memories, knowledge base, and agent rules",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/run_memory_mcp.py"],
      "env": {
        "MEMORY_MCP_HOST": "localhost",
        "MEMORY_MCP_PORT": "3001"
      },
      "enabled": true
    },
    "filesystem": {
      "name": "Filesystem",
      "description": "Access and manage files and directories with advanced search capabilities",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/tmp", "/home"],
      "enabled": false,
      "notes": "Provides read/write access to specified directories. Configure allowed paths in args."
    },
    "git": {
      "name": "Git",
      "description": "Git operations including status, diff, commit, and repository management",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-git"],
      "enabled": false,
      "notes": "Provides Git integration. Must be run in a Git repository."
    },
    "github": {
      "name": "GitHub",
      "description": "GitHub API integration for issues, PRs, repositories, and code search",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_TOKEN": "${GITHUB_TOKEN}"
      },
      "enabled": false,
      "notes": "Requires GITHUB_TOKEN environment variable for authentication."
    },
    "gitlab": {
      "name": "GitLab",
      "description": "GitLab API integration for issues, merge requests, and repository management",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-gitlab"],
      "env": {
        "GITLAB_TOKEN": "${GITLAB_TOKEN}",
        "GITLAB_URL": "${GITLAB_URL}"
      },
      "enabled": false,
      "notes": "Requires GITLAB_TOKEN and optionally GITLAB_URL (defaults to gitlab.com)."
    },
    "postgres": {
      "name": "PostgreSQL",
      "description": "PostgreSQL database queries and schema inspection",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-postgres"],
      "env": {
        "POSTGRES_CONNECTION_STRING": "${POSTGRES_CONNECTION_STRING}"
      },
      "enabled": false,
      "notes": "Requires POSTGRES_CONNECTION_STRING environment variable."
    },
    "sqlite": {
      "name": "SQLite",
      "description": "SQLite database queries and management",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sqlite", "/path/to/database.db"],
      "enabled": false,
      "notes": "Configure database path in args."
    },
    "brave-search": {
      "name": "Brave Search",
      "description": "Web search using Brave Search API",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-brave-search"],
      "env": {
        "BRAVE_API_KEY": "${BRAVE_API_KEY}"
      },
      "enabled": false,
      "notes": "Requires BRAVE_API_KEY environment variable."
    },
    "google-drive": {
      "name": "Google Drive",
      "description": "Access and manage Google Drive files and folders",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-gdrive"],
      "env": {
        "GOOGLE_APPLICATION_CREDENTIALS": "${GOOGLE_APPLICATION_CREDENTIALS}"
      },
      "enabled": false,
      "notes": "Requires Google Cloud service account credentials."
    },
    "slack": {
      "name": "Slack",
      "description": "Send messages and interact with Slack workspaces",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-slack"],
      "env": {
        "SLACK_BOT_TOKEN": "${SLACK_BOT_TOKEN}"
      },
      "enabled": false,
      "notes": "Requires SLACK_BOT_TOKEN environment variable."
    },
    "puppeteer": {
      "name": "Puppeteer",
      "description": "Browser automation and web scraping with Puppeteer",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-puppeteer"],
      "enabled": false,
      "notes": "Provides headless browser automation capabilities."
    },
    "docker": {
      "name": "Docker",
      "description": "Docker container management and operations",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "docker-mcp"],
      "enabled": false,
      "notes": "Manage Docker containers, images, networks, and volumes."
    },
    "kubernetes": {
      "name": "Kubernetes",
      "description": "Kubernetes cluster management and operations",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-kubernetes"],
      "env": {
        "KUBECONFIG": "${KUBECONFIG}"
      },
      "enabled": false,
      "notes": "Requires kubectl and KUBECONFIG environment variable."
    },
    "sequential-thinking": {
      "name": "Sequential Thinking",
      "description": "Enhanced reasoning through structured thought processes",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"],
      "enabled": false,
      "notes": "Provides prompts for step-by-step reasoning."
    },
    "everything": {
      "name": "Everything Search",
      "description": "Fast file search using Everything search engine (Windows only)",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-everything"],
      "enabled": false,
      "notes": "Windows only. Requires Everything search engine installed."
    },
    "aws-kb": {
      "name": "AWS Knowledge Base",
      "description": "Query AWS knowledge bases and documents",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-aws-kb-retrieval"],
      "env": {
        "AWS_ACCESS_KEY_ID": "${AWS_ACCESS_KEY_ID}",
        "AWS_SECRET_ACCESS_KEY": "${AWS_SECRET_ACCESS_KEY}",
        "AWS_REGION": "${AWS_REGION}"
      },
      "enabled": false,
      "notes": "Requires AWS credentials and region."
    },
    "time": {
      "name": "Time",
      "description": "Get current time in different timezones",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-time"],
      "enabled": false,
      "notes": "Provides timezone-aware time information."
    },
    "fetch": {
      "name": "Fetch",
      "description": "HTTP fetch operations and web content retrieval",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-fetch"],
      "enabled": false,
      "notes": "Fetch web content, make HTTP requests."
    },
    "youtube-transcript": {
      "name": "YouTube Transcript",
      "description": "Retrieve transcripts from YouTube videos",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@kimtaeyoon83/mcp-server-youtube-transcript"],
      "enabled": false,
      "notes": "Get subtitles and transcripts from YouTube videos."
    },
    "obsidian": {
      "name": "Obsidian",
      "description": "Interact with Obsidian vault notes",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "obsidian-mcp"],
      "env": {
        "OBSIDIAN_VAULT_PATH": "${OBSIDIAN_VAULT_PATH}"
      },
      "enabled": false,
      "notes": "Requires OBSIDIAN_VAULT_PATH environment variable."
    },
    "redis": {
      "name": "Redis",
      "description": "Redis database operations and caching",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-redis"],
      "env": {
        "REDIS_URL": "${REDIS_URL}"
      },
      "enabled": false,
      "notes": "Requires REDIS_URL environment variable."
    },
    "mcp-memory": {
      "name": "MCP Memory",
      "description": "Enhanced memory and knowledge graph capabilities",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-memory"],
      "enabled": false,
      "notes": "Advanced memory management with knowledge graph."
    },
    "arxiv": {
      "name": "ArXiv",
      "description": "Search and retrieve academic papers from arXiv",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-arxiv"],
      "enabled": false,
      "notes": "Academic research paper access."
    },
    "shell": {
      "name": "Shell",
      "description": "Execute shell commands and scripts",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-shell"],
      "enabled": false,
      "notes": "Execute shell commands with safety controls."
    },
    "sentry": {
      "name": "Sentry",
      "description": "Sentry error tracking and monitoring integration",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sentry"],
      "env": {
        "SENTRY_DSN": "${SENTRY_DSN}"
      },
      "enabled": false,
      "notes": "Requires SENTRY_DSN environment variable."
    },
    "azure-devops": {
      "name": "Azure DevOps",
      "description": "Azure DevOps integration for work items, pipelines, and repos",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-azure-devops"],
      "env": {
        "AZURE_DEVOPS_TOKEN": "${AZURE_DEVOPS_TOKEN}",
        "AZURE_DEVOPS_ORG": "${AZURE_DEVOPS_ORG}"
      },
      "enabled": false,
      "notes": "Requires Azure DevOps token and organization."
    },
    "linear": {
      "name": "Linear",
      "description": "Linear project management integration",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-linear"],
      "env": {
        "LINEAR_API_KEY": "${LINEAR_API_KEY}"
      },
      "enabled": false,
      "notes": "Requires LINEAR_API_KEY environment variable."
    },
    "jira": {
      "name": "Jira",
      "description": "Atlassian Jira integration for issue tracking",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-jira"],
      "env": {
        "JIRA_URL": "${JIRA_URL}",
        "JIRA_EMAIL": "${JIRA_EMAIL}",
        "JIRA_API_TOKEN": "${JIRA_API_TOKEN}"
      },
      "enabled": false,
      "notes": "Requires Jira URL, email, and API token."
    },
    "asana": {
      "name": "Asana",
      "description": "Asana project management integration",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-asana"],
      "env": {
        "ASANA_ACCESS_TOKEN": "${ASANA_ACCESS_TOKEN}"
      },
      "enabled": false,
      "notes": "Requires ASANA_ACCESS_TOKEN environment variable."
    },
    "notion": {
      "name": "Notion",
      "description": "Notion workspace integration",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@notionhq/mcp-server-notion"],
      "env": {
        "NOTION_TOKEN": "${NOTION_TOKEN}"
      },
      "enabled": false,
      "notes": "Requires NOTION_TOKEN environment variable."
    },
    "airtable": {
      "name": "Airtable",
      "description": "Airtable database integration",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-airtable"],
      "env": {
        "AIRTABLE_API_KEY": "${AIRTABLE_API_KEY}"
      },
      "enabled": false,
      "notes": "Requires AIRTABLE_API_KEY environment variable."
    },
    "mongodb": {
      "name": "MongoDB",
      "description": "MongoDB database operations",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-mongodb"],
      "env": {
        "MONGODB_URI": "${MONGODB_URI}"
      },
      "enabled": false,
      "notes": "Requires MONGODB_URI environment variable."
    },
    "mysql": {
      "name": "MySQL",
      "description": "MySQL database operations",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-mysql"],
      "env": {
        "MYSQL_CONNECTION_STRING": "${MYSQL_CONNECTION_STRING}"
      },
      "enabled": false,
      "notes": "Requires MYSQL_CONNECTION_STRING environment variable."
    },
    "web-search": {
      "name": "Web Search",
      "description": "Multi-provider web search (DuckDuckGo, Google, Bing)",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-web-search"],
      "enabled": false,
      "notes": "Web search across multiple providers."
    },
    "whois": {
      "name": "WHOIS",
      "description": "Domain WHOIS lookup and DNS information - OSINT tool",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-whois"],
      "enabled": false,
      "notes": "Domain research and reconnaissance tool."
    },
    "shodan": {
      "name": "Shodan",
      "description": "Shodan search engine for Internet-connected devices - OSINT tool",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-shodan"],
      "env": {
        "SHODAN_API_KEY": "${SHODAN_API_KEY}"
      },
      "enabled": false,
      "notes": "Requires SHODAN_API_KEY. IoT and device reconnaissance."
    },
    "censys": {
      "name": "Censys",
      "description": "Censys search for hosts and certificates - OSINT tool",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-censys"],
      "env": {
        "CENSYS_API_ID": "${CENSYS_API_ID}",
        "CENSYS_API_SECRET": "${CENSYS_API_SECRET}"
      },
      "enabled": false,
      "notes": "Requires Censys API credentials. Infrastructure reconnaissance."
    },
    "nmap": {
      "name": "Nmap",
      "description": "Network scanning and port discovery - Security tool",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/nmap_server.py"],
      "enabled": false,
      "notes": "Network reconnaissance and security scanning."
    },
    "metasploit": {
      "name": "Metasploit",
      "description": "Metasploit Framework integration - Security tool",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/metasploit_server.py"],
      "enabled": false,
      "notes": "Penetration testing and exploit framework."
    },
    "osint-toolkit": {
      "name": "OSINT Toolkit",
      "description": "Comprehensive OSINT tools collection",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/osint_server.py"],
      "enabled": false,
      "notes": "Email harvesting, social media lookup, data breach search."
    },
    "virustotal": {
      "name": "VirusTotal",
      "description": "Malware scanning and threat intelligence - Security tool",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-virustotal"],
      "env": {
        "VIRUSTOTAL_API_KEY": "${VIRUSTOTAL_API_KEY}"
      },
      "enabled": false,
      "notes": "Requires VIRUSTOTAL_API_KEY. Malware and URL analysis."
    },
    "haveibeenpwned": {
      "name": "Have I Been Pwned",
      "description": "Check for data breaches and compromised accounts - OSINT tool",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-hibp"],
      "env": {
        "HIBP_API_KEY": "${HIBP_API_KEY}"
      },
      "enabled": false,
      "notes": "Requires HIBP_API_KEY. Data breach reconnaissance."
    },
    "securitytrails": {
      "name": "SecurityTrails",
      "description": "Historical DNS and WHOIS data - OSINT tool",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-securitytrails"],
      "env": {
        "SECURITYTRAILS_API_KEY": "${SECURITYTRAILS_API_KEY}"
      },
      "enabled": false,
      "notes": "Requires SecurityTrails API key. Infrastructure research."
    },
    "crt-sh": {
      "name": "crt.sh",
      "description": "Certificate Transparency logs search - OSINT tool",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/crtsh_server.py"],
      "enabled": false,
      "notes": "SSL certificate discovery for subdomain enumeration."
    },
    "ipinfo": {
      "name": "IPInfo",
      "description": "IP address geolocation and ASN lookup - OSINT tool",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-ipinfo"],
      "env": {
        "IPINFO_TOKEN": "${IPINFO_TOKEN}"
      },
      "enabled": false,
      "notes": "IP geolocation and network information."
    },
    "hunter": {
      "name": "Hunter.io",
      "description": "Email finder and verification - OSINT tool",
      "type": "stdio",
      "command": "npx",
      "args": ["-y", "mcp-hunter"],
      "env": {
        "HUNTER_API_KEY": "${HUNTER_API_KEY}"
      },
      "enabled": false,
      "notes": "Email discovery and validation."
    },
    "twitter-osint": {
      "name": "Twitter OSINT",
      "description": "Twitter/X intelligence gathering - OSINT tool",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/twitter_osint_server.py"],
      "env": {
        "TWITTER_BEARER_TOKEN": "${TWITTER_BEARER_TOKEN}"
      },
      "enabled": false,
      "notes": "Social media intelligence gathering."
    },
    "linkedin-osint": {
      "name": "LinkedIn OSINT",
      "description": "LinkedIn intelligence gathering - OSINT tool",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/linkedin_osint_server.py"],
      "env": {
        "LINKEDIN_API_KEY": "${LINKEDIN_API_KEY}"
      },
      "enabled": false,
      "notes": "Professional network intelligence."
    },
    "github-osint": {
      "name": "GitHub OSINT",
      "description": "GitHub intelligence and code reconnaissance - OSINT tool",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/github_osint_server.py"],
      "env": {
        "GITHUB_TOKEN": "${GITHUB_TOKEN}"
      },
      "enabled": false,
      "notes": "Code repository intelligence and user profiling."
    },
    "wayback-machine": {
      "name": "Wayback Machine",
      "description": "Internet Archive historical website data - OSINT tool",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/wayback_server.py"],
      "enabled": false,
      "notes": "Historical website snapshots and data."
    },
    "subfinder": {
      "name": "Subfinder",
      "description": "Subdomain enumeration - OSINT/Security tool",
      "type": "stdio",
      "command": "python",
      "args": ["/a0/python/mcp_servers/subfinder_server.py"],
      "enabled": false,
      "notes": "Subdomain discovery and enumeration."
    }
  }
}
